---
service:
  name: {{ cookiecutter.project_directory }}

plugins:
  - serverless-python-requirements
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: python{{ cookiecutter.lambda_runtime }}
  region: ${self:custom.region}
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${opt:profile, "default"}
  role: {{ cookiecutter.project_name.replace(' ', '').replace('_', '').replace('-', '') }}Role
  memorySize: 256
  timeout: 10
  tracing: false
  deploymentBucket:
    name: {{ cookiecutter.lambda_code_deployment_bucket }}
  stackTags:
    service: ${self:service}

package:
  individually: true

custom:
  awsAccountId: {{ cookiecutter.aws_account_id }}
  defaultStage: dev
  pythonRequirements:
    dockerizePip: true
    fileName: Pipfile
    dockerFile: Dockerfile
    slim: true
  region: ${env:REGION, 'us-east-2'}

functions:
  {{ cookiecutter.lambda_name }}:
    name: {{ cookiecutter.lambda_name }}_${self:provider.stage}
    description: >
      The Lambda Function
    handler: {{ cookiecutter.lambda_name }}.main.lambda_handler
    memory: 128
    package: 
      exclude:
        - '**/*'
      include:
        - '{{ cookiecutter.lambda_name }}/**'
    role: {{ cookiecutter.project_name.replace(' ', '').replace('_', '').replace('-', '') }}Role
    runtime: python{{ cookiecutter.lambda_runtime }}
    timeout: 10
    tracing: false
    events:
      - http:
          path: hello_world
          method: GET
    environment:
      STAGE: ${self:provider.stage}

resources:
  Resources:
    {{ cookiecutter.project_name.replace(' ', '').replace('_', '').replace('-', '') }}Role:
      Type: AWS::IAM::Role
      Properties:
        Path: /service/
        RoleName: {{ cookiecutter.project_directory }}-${self:provider.stage}-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: {{ cookiecutter.project_directory }}-${self:provider.stage}-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join': [':', ['arn:aws:logs', Ref: 'AWS::Region', Ref: AWS::AccountId, 'log-group:/aws/lambda/*:*:*']]
                -  Effect: Allow
                   Action:
                     - s3:PutObject
                   Resource:
                       - "arn:aws:s3:::${self:provider.deploymentBucket}/*"
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource:
                    - "arn:aws:kms:eu-central-1:${self:custom.awsAccountId}:alias/*"
                    - "arn:aws:kms:eu-central-1:${self:custom.awsAccountId}:key/*"
                - Effect: Allow
                  Action:
                    - "xray:PutTraceSegments"
                    - "xray:PutTelemetryRecords"
                  Resource:
                    - "*"
                # for VPC access
                - Effect: Allow
                  Action:
                    - "ec2:CreateNetworkInterface"
                    - "ec2:DescribeNetworkInterfaces"
                    - "ec2:DeleteNetworkInterface"
                  Resource:
                    - "*"
